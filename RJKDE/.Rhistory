devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()
devtools::document()
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()
devtools::document()
Rcpp::compileAttributes()
# 5. Reinstall Package
devtools::install(build = TRUE, force = TRUE)
# Alternative for quick development:
devtools::load_all()  # Faster but temporary
# 6. Restart R (Ctrl+Shift+F10 in RStudio)
.rs.restartR()
library(RJKDE)
source("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/dpmm_rjkde_comp_fun_example.R", echo=TRUE)
source("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/dpmm_rjkde_comp_fun_example.R", echo=TRUE)
source("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/dpmm_rjkde_comp_fun_example.R", echo=TRUE)
source("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/dpmm_rjkde_comp_fun_example.R", echo=TRUE)
warnings()
sample(0,1)
sample(0,1)
sample(0,1)
sample(0,1)
sample(0,1)
sample(0,1)
sample(0,1)
sample(0,1)
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 4. Recompile C++ Code (if modified .cpp files)
Rcpp::compileAttributes()  # Updates Rcpp exports
# 5. Reinstall Package
devtools::install(build = TRUE, force = TRUE)
# Alternative for quick development:
devtools::load_all()  # Faster but temporary
# 6. Restart R (Ctrl+Shift+F10 in RStudio)
.rs.restartR()
library(RJKDE)
rnormmix_rcpp(c(-1,1), 0.5)  # Test changes
# If Errors Occur:
remove.packages("RJKDE")  # Complete removal
devtools::install()       # Fresh install
source("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/dpmm_rjkde_comparison_fun.R", echo=TRUE)
# 1. Save Your Changes
# 2. Clean Previous Build
# In R console:
# Unload all versions
try(detach("package:RJKDE", unload = TRUE, force = TRUE))
devtools::clean_dll()  # Removes compiled binaries
pkgbuild::clean_dll()  # Additional cleanup
# 3. Update Documentation if needed
devtools::document()  # Updates NAMESPACE and .Rd files
# 4. Recompile C++ Code (if modified .cpp files)
Rcpp::compileAttributes()  # Updates Rcpp exports
# 5. Reinstall Package
devtools::install(build = TRUE, force = TRUE)
# Alternative for quick development:
devtools::load_all()  # Faster but temporary
# 6. Restart R (Ctrl+Shift+F10 in RStudio)
.rs.restartR()
library(RJKDE)
rnormmix_rcpp(c(-1,1), 0.5)  # Test changes
# If Errors Occur:
remove.packages("RJKDE")  # Complete removal
