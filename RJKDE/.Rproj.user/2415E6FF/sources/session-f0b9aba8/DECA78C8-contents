
library(RJKDE)

compare_methods <- function(data, true_density, ygrid, n_iter=100, mc=10) {


  # # True Density
  # true_density <- density(data, n = length(ygrid), from = min(data) - 1, to = max(data) + 1)$y


  # Initialize storage of results
  gridsize <- length(ygrid)
  results <- list(
    fhat_rjkde_mc = matrix(0, gridsize, mc),
    fhat_dpmm_mc = matrix(0, gridsize, mc),
    fhat_rjkde_mc.u = matrix(0, gridsize, mc),
    fhat_dpmm_mc.u = matrix(0, gridsize, mc),
    fhat_rjkde_mc.l = matrix(0, gridsize, mc),
    fhat_dpmm_mc.l = matrix(0, gridsize, mc),
    time = data.frame(RJKDE=rep(0,mc), DPMM=rep(0,mc)),
    metrics = list()
  )

  for (iter in 1:mc){

    flag <- iter%%2==0
    if(flag) print(iter)

    # Run DPMM
    # Start timer
    start_time <- Sys.time()
    dpmm <- dpmm_clustering(data, ygrid, n_iter = n_iter)
    # End timer
    end_time <- Sys.time()
    elapsed_time_dpmm <- as.numeric(difftime(end_time, start_time, units = "secs"))

    # Run RJKDE
    bw <- density(data)$bw

    # Standardize the data
    data_mean <- mean(data)
    data_sd <- sd(data)
    data_rjkde <- (data - data_mean) / data_sd
    ygrid_rjkde <- (ygrid - data_mean)/data_sd

    # Start timer
    start_time <- Sys.time()
    rjkde <- rj_mcmc_rcpp(data_rjkde, ygrid_rjkde, mc = n_iter, bw = bw)
    # End timer
    end_time <- Sys.time()
    elapsed_time_rjkde <- as.numeric(difftime(end_time, start_time, units = "secs"))

    # Store results


    fsamps_rescaled <- rjkde$fsamps/data_sd

    results$fhat_rjkde_mc[,iter] <- rowMeans(fsamps_rescaled)
    results$fhat_dpmm_mc[,iter] <- rowMeans(dpmm$density_history)

    results$fhat_rjkde_mc.u[,iter] <- apply(fsamps_rescaled, 1, quantile, 0.95)
    results$fhat_dpmm_mc.u[,iter] <- apply(dpmm$density_history, 1, quantile, 0.95)

    results$fhat_rjkde_mc.l[,iter] <- apply(fsamps_rescaled, 1, quantile, 0.05)
    results$fhat_dpmm_mc.l[,iter] <- apply(dpmm$density_history, 1, quantile, 0.05)



    results$time$RJKDE[iter] <- elapsed_time_rjkde
    results$time$DPMM[iter] <- elapsed_time_dpmm

    # Calculate metrics
    results$metrics$rjkde[[iter]] <- metrics(true_density,
                                             results$fhat_rjkde_mc[,iter],
                                             results$fhat_rjkde_mc.l[,iter],
                                             results$fhat_rjkde_mc.u[,iter])

    results$metrics$dpmm[[iter]] <- metrics(true_density,
                                            results$fhat_dpmm_mc[,iter],
                                            results$fhat_dpmm_mc.l[,iter],
                                            results$fhat_dpmm_mc.u[,iter])

  }

  # Plot results

  hist(data, freq = FALSE, breaks = 35, main = '', ylab = 'density', xlab = 'data')
  lines(ygrid,true_density,col='red',lwd=2)
  lines(ygrid,results$fhat_rjkde_mc[,iter],col='green',lwd=2)
  polygon(c(ygrid, rev(ygrid)),
          c(results$fhat_rjkde_mc.u[,iter], rev(results$fhat_rjkde_mc.l[,iter])),
          col=rgb(0,1,0,0.2), border=NA)
  lines(ygrid,results$fhat_dpmm_mc[,iter],col='blue',lwd=2)
  polygon(c(ygrid, rev(ygrid)),
          c(results$fhat_dpmm_mc.u[,iter], rev(results$fhat_dpmm_mc.l[,iter])),
          col=rgb(0,0,1,0.2), border=NA)
  legend("topright", legend=c("Truth", "RJKDE", "DPMM"), col=c("red", "green", "blue"), lwd=2, , cex = 0.6)


  return(results)
}


generate_results_table <- function(results) {
  # Calculate mean metrics across all iterations
  mean_metrics <- data.frame(
    Method = c("RJKDE", "DPMM"),
    Time = c(mean(results$time$RJKDE), mean(results$time$DPMM)),
    RMSE = c(mean(sapply(results$metrics$rjkde, function(x) x$Mean_RMSE)),
             mean(sapply(results$metrics$dpmm, function(x) x$Mean_RMSE))),
    Coverage = c(mean(sapply(results$metrics$rjkde, function(x) x$Mean_Coverage)),
                 mean(sapply(results$metrics$dpmm, function(x) x$Mean_Coverage))),
    Complete_Coverage = c(mean(sapply(results$metrics$rjkde, function(x) x$Mean_Complete_Coverage)),
                          mean(sapply(results$metrics$dpmm, function(x) x$Mean_Complete_Coverage))),
    Interval_Width = c(mean(sapply(results$metrics$rjkde, function(x) x$Mean_Interval_Width)),
                       mean(sapply(results$metrics$dpmm, function(x) x$Mean_Interval_Width)))
  )

  # Round only numeric columns
  numeric_cols <- sapply(mean_metrics, is.numeric)
  mean_metrics[numeric_cols] <- round(mean_metrics[numeric_cols], 4)

  return(mean_metrics)
}


