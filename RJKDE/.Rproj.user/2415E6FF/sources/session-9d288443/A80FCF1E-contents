devtools::document()
# In R console:
devtools::clean_dll()  # Cleans compiled C++ files
devtools::document()
# In R console:
devtools::clean_dll()  # Cleans compiled C++ files
devtools::document()
devtools::install(build = TRUE)
library(RJKDE)
ls("package:RJKDE")  # Should show your exported functions
library(roxygen2)
detach("package:RJKDE", unload = TRUE)
library(RJKDE)
# In R console:
file.remove("R/zzz.R")
devtools::clean_dll()       # Remove old compiled code
devtools::document()        # Regenerate documentation
devtools::install(build = TRUE)  # Fresh install
file.remove("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE/man/hello.Rd")
rm(list = c("KDE_density_rcpp", "rj_mcmc_rcpp", "rnormmix_rcpp"))
.rs.restartR()  # RStudio-specific command
devtools::load_all()  # Loads package correctly without duplicates
devtools::load_all()  # For development
library(RJKDE)        # For regular use
find("rj_mcmc_rcpp")  # Should show only "package:RJKDE"
?rj_mcmc_rcpp  # Opens help page
?KDE_density_rcpp
.rs.restartR()  # RStudio-specific command
devtools::load_all()  # For development
library(RJKDE)        # For regular use
?rj_mcmc_rcpp  # Opens help page
?KDE_density_rcpp
?rj_mcmc_rcpp  # Opens help page
?KDE_density_rcpp
devtools::document()
devtools::install(build = TRUE, force = TRUE)
.rs.restartR()  # RStudio-specific command
devtools::load_all()  # For development
library(RJKDE)        # For regular use
?rj_mcmc_rcpp  # Opens help page
?KDE_density_rcpp
library(RJKDE)
# Test sampling
samples <- replicate(100, rnormmix_rcpp(c(-1, 1), 0.5))
# Remove old builds
devtools::clean_dll()
# Rebuild from scratch
devtools::document()
devtools::install(build = TRUE, force = TRUE)
# After reinstalling, check registered functions
getDLLRegisteredRoutines("RJKDE")
# Check if package is properly installed
find.package("RJKDE")
library(RJKDE, verbose = TRUE)  # Shows loading details
# Completely remove and reinstall
remove.packages("RJKDE")
devtools::install(build = TRUE, force = TRUE)
# List all loaded DLLs
getLoadedDLLs()
# Look for RJKDE in the list
grep("RJKDE", names(getLoadedDLLs()), value = TRUE)
dll_path <- system.file("libs", package = "RJKDE")
dll_file <- file.path(dll_path, "RJKDE.so")  # .dll on Windows
if(file.exists(dll_file)) {
dyn.load(dll_file)
getDLLRegisteredRoutines("RJKDE")
}
Rcpp::evalCpp("1+1")
# Check where R is installing
.libPaths()
# Manually check the RJKDE folder exists there
# Clean everything
devtools::clean_dll()
pkgbuild::clean_dll()
# Rebuild from scratch
devtools::document()
devtools::install(build = TRUE, force = TRUE)
library(RJKDE)
getLoadedDLLs()  # Should show RJKDE
library(RJKDE)
samples <- replicate(10, rnormmix_rcpp(c(-1,1), 0.5))  # Start with small test
file.remove("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE/NAMESPACE")
.rs.restartR()
# Completely remove and reinstall
remove.packages("RJKDE")
devtools::install(build = TRUE, force = TRUE)
# Remove old builds
devtools::clean_dll()
# Rebuild from scratch
devtools::document()
clear
clc
clear all
devtools::document()
getwd()  # Should show your package directory (e.g., ".../RJKDE/")
list.files()  # Should show DESCRIPTION, NAMESPACE, R/, src/, etc.
devtools::document(clean = TRUE)
devtools::document(pkg = here::here())
# Clean everything first
devtools::clean_dll()
unlink("NAMESPACE")  # Remove if exists
Rcpp::compileAttributes()  # Manually run
# 1. Clean any existing builds
devtools::clean_dll()
# 2. Manually trigger Roxygen
roxygen2::roxygenise(clean = TRUE)
# Clean everything first
devtools::clean_dll()
unlink("NAMESPACE")  # Remove if exists
Rcpp::compileAttributes()  # Manually run
# Clean everything first
devtools::clean_dll()
unlink("NAMESPACE")  # Remove if exists
Rcpp::compileAttributes()  # Manually run
devtools::install()
setwd("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE")
list.files()
# Remove auto-generated files
if(file.exists("NAMESPACE")) file.remove("NAMESPACE")
if(file.exists("src/RcppExports.cpp")) file.remove("src/RcppExports.cpp")
# 1. Recreate exports
Rcpp::compileAttributes()
file.exists("NAMESPACE")  # Should be TRUE
file.exists("src/RcppExports.cpp")  # Should be TRUE
# 1. Recreate exports
Rcpp::compileAttributes()
file.remove("man")
# 1. Recreate exports
Rcpp::compileAttributes()
file.remove(".Rbuildignore")
file.remove(".Rhistory")
.rs.restartR()
# 1. Recreate exports
Rcpp::compileAttributes()
file.remove(R/hello.R)
setwd("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE")
file.remove(R/hello.R)
file.remove("R/hello.R")
# 1. Generate exports
Rcpp::compileAttributes(pkgdir = ".")
# 2. Create documentation
roxygen2::roxygenise()
# 3. Full install
devtools::install(build = TRUE, force = TRUE)
file.exists("DESCRIPTION")  # Must be TRUE
file.exists("src/RJMIXMOD.cpp")  # Must be TRUE
library(RJKDE)
library(RJKDE)
rnormmix_rcpp(c(-1,1), 0.5)  # Should work now
find.package("RJKDE")  # Should return path to package
library(RJKDE, verbose = TRUE)  # Shows loading details
list.files(system.file("libs", package = "RJKDE"))  # Should show .so/.dll
list.files(system.file("src", package = "RJKDE"))  # Should show .cpp files
list.files("src/")  # Run this in your package root directory
# Remove old installation
remove.packages("RJKDE")
# Clean and rebuild from source
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::document()
devtools::install(build = TRUE, force = TRUE)
# Check installed files
list.files(system.file(package = "RJKDE"))  # All package files
list.files(system.file("libs", package = "RJKDE"))  # Should show .so
list.files(system.file("src", package = "RJKDE"))  # Might be empty (normal)
# 1. Clean existing builds
devtools::clean_dll()
# 2. Recompile attributes
Rcpp::compileAttributes()
# 3. Reinstall
devtools::install(build = TRUE, force = TRUE)
library(RJKDE)
getDLLRegisteredRoutines("RJKDE")  # Should now show your functions
library(RJKDE)
rnormmix_rcpp(c(-1,1), 0.5)  # Should now work
# Remove installed version
remove.packages("RJKDE")
# Delete cached files
unlink(file.path(Sys.getenv("R_LIBS_USER"), "RJKDE"), recursive = TRUE)
unlink("~/Library/Caches/org.R-project.R/R/RJKDE", recursive = TRUE)
# In your package development directory:
# Clean everything
devtools::clean_dll()
pkgbuild::clean_dll()
# Regenerate all build files
Rcpp::compileAttributes()
roxygen2::roxygenise()
# Check package files
list.files(system.file(package = "RJKDE"))
# Test loading
library(RJKDE)
library(roxygen2)
setwd("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE")
˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘˘i8ouk
# Remove installed version
remove.packages("RJKDE")
# Delete cached files
unlink(file.path(Sys.getenv("R_LIBS_USER"), "RJKDE"), recursive = TRUE)
unlink("~/Library/Caches/org.R-project.R/R/RJKDE", recursive = TRUE)
setwd("~/ASU Dropbox/Palak Jain/Palak_Hahn/Chapter2/RJKDE")
# Clean everything
devtools::clean_dll()
pkgbuild::clean_dll()
# Regenerate all build files
Rcpp::compileAttributes()
roxygen2::roxygenise()
# Remove installed version
remove.packages("RJKDE")
# Delete all cached files (Mac specific paths shown)
unlink("/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/RJKDE", recursive = TRUE)
unlink("~/Library/Caches/org.R-project.R/R/RJKDE", recursive = TRUE)
unlink("~/Library/R/arm64/4.3/library/RJKDE", recursive = TRUE)
